#!/usr/bin/env node
var lib = require('./index'),
  p = require('commander');

p
  .version(require('./package').version)
  .option('-c, --configFile [file]', 'config file, defaults to cwd/app.config', process.cwd() + '/app.config')
  .option('-m, --vmargsFile [file]', 'vm file, defaults to cwd/vm.args', process.cwd() + '/vm.args')

p
  .command('http <cmd> <what> <arg>')
  .description('http related commands')
  .action(function(cmd, what, arg){
    var client = getClient();
    switch(cmd){
      case 'set':{
        switch(what){
          case 'port':{
            client.setHTTPPort(arg, function(err){
              if (err){
                throw err;
              }
            });
            break;
          }
          case 'host':{
            client.setHostName(arg, function(err){
              if (err){
                throw err;
              }
            });
            break;
          }
          case 'handoff-port':{
            client.setHandoffPort(arg, function(err){
              if (err){
                throw err;
              }
            });
            break;
          }
        }
        break;
      }
    }
  });

p
  .command('pb <cmd> <what> <arg>')
  .description('protocol buffer related commands')
  .action(function(cmd, what, arg){
    var client = getClient();
    switch(cmd){
      case 'set':{
        switch(what){
          case 'ip':{
            client.setPBIP(arg, function(err){
              if (err){
                throw err;
              }
            });
            break;
          }
          case 'port':{
            client.setPBPort(arg, function(err){
              if(err){
                throw err;
              }
            });
            break;
          }
        }
      }
      break;
    }
  });

p
  .command('disable <what>')
  .description('disable something')
  .action(function(what){
    var client = getClient();
    switch(what){
      case 'pb':{
        client.disablePB(function(err){
          if(err){
            throw err;
          }
        });
        break;
      }
    }
  });

p
  .command('backend <name>')
  .description('set backend type like bitcast or leveldb or backend get to get the current type')
  .action(function(name){
    var client = getClient();
    if(name !== 'get'){
      client.backend.setType(name, function(err){
        if(err){
          throw err;
        }
      });
    } else {
      client.backend.getType(function(err, type){
        if(err){
          throw err;
        }
        console.log(type);
      });
    }
  });

p
  .command('nodename <name>')
  .description('set nodename or nodename get to get the current name')
  .action(function(name){
    var client = getClient();
    if(name !== 'get'){
      client.setNodeName(name, function(err){
        if(err){
          throw err;
        }
      });
    } else {
      client.getNodeName(function(err, name){
        console.log(name);
      });
    }
  });

p
  .command('cookie <name>')
  .description('set cookie name or cookie get to get the current name')
  .action(function(name){
    var client = getClient();
    if(name !== 'get'){
      client.setCookieName(name, function(err){
        if(err){
          throw err;
        }
      });
    } else {
      client.getCookieName(function(err, name){
        console.log(name);
      });
    }
  });

var getClient = function(){
  return new lib({config:p.configFile, args:p.vmargsFile});
}
p
  .parse(process.argv);


